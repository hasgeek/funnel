# Default tool config file. See also setup.cfg for tools that don't yet
# support pyproject.toml.

[tool.black]
line-length = 88
target_version = ['py311']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.creosote]
venvs = [".venv"]
paths = ["funnel", "tests", "migrations/versions"]
deps-file = "requirements/base.in"
exclude-deps = [
  "argon2-cffi",        # Optional dep for passlib
  "bcrypt",             # Optional dep for passlib
  "greenlet",           # Optional dep for SQLAlchemy's asyncio support
  "gunicorn",           # Not imported, used as server
  "linkify-it-py",      # Optional dep for markdown-it-py
  "psycopg",            # Optional dep for SQLAlchemy
  "rq-dashboard",       # Creosote fails to recognise the import
  "tzdata",             # Resource-only dep, no code to import
  "urllib3",            # Unused but required to silence a pip-audit warning
  "wtforms-sqlalchemy", # Temp dep on an unreleased git branch
]

[tool.djlint]
profile = 'jinja'
extension = '.html.jinja2'
indent = 2
ignore = "T002,T028,H006,H016,H020,H023,H030,H031"

[tool.curlylint]
# Curlylint is not used, but the configuration is preserved here for future use
include = '\.html.jinja2$'
template_tags = [['set'], ['trans', 'pluralize', 'endtrans']]
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.curlylint.rules]
# All role attributes must be valid.
# See https://www.curlylint.org/docs/rules/aria_role
aria_role = true
# HTML lang attribute must be set
# See https://www.curlylint.org/docs/rules/html_has_lang
html_has_lang = true
# The `alt` attribute must be present.
# See https://www.curlylint.org/docs/rules/image_alt
image_alt = true
# Indent 2 spaces
# See https://www.curlylint.org/docs/rules/indent
# Enable after issue 6 is fixed: https://github.com/thibaudcolas/curlylint/issues/6
# indent = 2
# Avoid positive `tabindex` values
tabindex_no_positive = true

[tool.isort]
# Some isort functionality is replicated in ruff, which should have matching config
profile = 'black'
multi_line_output = 3
include_trailing_comma = true
line_length = 88
order_by_type = true
use_parentheses = true
combine_as_imports = true
split_on_trailing_comma = false
known_repo = ['funnel']
known_first_party = ['baseframe', 'coaster', 'flask_lastuser']
default_section = 'THIRDPARTY'
sections = [
  'FUTURE',
  'STDLIB',
  'THIRDPARTY',
  'FIRSTPARTY',
  'REPO',
  'LOCALFOLDER',
]

[tool.pytest.ini_options]
minversion = "6.1" # For config.rootpath
required_plugins = [
  'pytest-asyncio',
  'pytest-bdd',
  'pytest-cov',
  'pytest-dotenv',
  'pytest-env',
  'pytest-rerunfailures',
  'pytest-socket',
  'requests-mock',
]
addopts = [
  '--cov-report=term-missing',
  '--disable-socket',
  '--allow-unix-socket',         # Required for Playwright tests
  '--allow-hosts=127.0.0.1,::1', # Add Docker IPs here
  '--strict-markers',
  # '--typeguard-packages=funnel,tests',  # This breaks on toc.py in markdown
]
markers = [
  'dbcommit: Test requires true database commits',
  'formdata(dict): HTTP form data for form fixture',
  'formuser("user"): User fixture for editing a form',
  'update_markdown_data: Regenerate markdown test output (dev use only)',
  'debug_markdown_output: Generate markdown debug file tests/data/markdown/output.html (dev use only)',
  'requires_config("app", "feature"): Run test only if app config is available',
  'mock_config("app", config_dict): Create mock configuration for a feature',
]
bdd_features_base_dir = 'tests/features/'
env = ['FLASK_ENV=testing', 'FLASK_TESTING=true']
env_override_existing_values = false
env_files = ['.env.testing', '.testenv', '.env', '.flaskenv']

[tool.pyright]
venv = '.venv'
reportMissingImports = true
reportMissingTypeStubs = false
reportShadowedImports = false
pythonVersion = '3.11'

[tool.mypy]
files = '**/*.py'
exclude = ['node_modules', 'build']
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = 'tests.*'
check_untyped_defs = true
warn_unreachable = false

[tool.pylint.master]
max-parents = 10
init-hook = """
import os, astroid.bases, pathlib
# Tell Pylint where to find packages from within tests
for path in pathlib.Path.cwd().parents:
    if (path / 'pyproject.toml').is_file():
      sys.path.append(str(path))
# Tell Pylint hybrid_property and cached_property are property-types
astroid.bases.POSSIBLE_PROPERTIES.add('hybrid_property')
astroid.bases.POSSIBLE_PROPERTIES.add('cached_property')
"""

[tool.pylint.message_control]
max-line-length = 88
disable = [
  'attribute-defined-outside-init', # Defer to static type checkers
  'comparison-with-callable',       # Pylint is confused by SQLAlchemy attributes
  'cyclic-import',                  # We have tail imports all over
  'duplicate-code',                 # Too many false positives
  'fixme',                          # Our workflow is to tag for future fixes
  'invalid-name',                   # Flake8 covers our naming convention requirements
  'line-too-long',                  # Long lines are okay if Black doesn't wrap them
  'no-member',                      # Pylint gets confused over how some members become part of an instance
  'too-few-public-methods',         # Data classes and validator classes have few methods
  'too-many-ancestors',             # Our models have a large number of mixin classes
  'too-many-arguments',             # Callables can have many optional arguments
  'too-many-instance-attributes',   # Some instances are just bags of attributes
  'too-many-lines',                 # We have large files that include all related functionality
  'too-many-public-methods',        # Models and views have many public methods
  'unused-argument',                # Arguments required for spec compatibility aren't always used
  'wrong-import-order',             # Let isort and ruff handle this
  'wrong-import-position',          # Let black, isort and ruff handle this

  # Temporarily disabled pending audit and fixes
  'missing-class-docstring',
  'missing-function-docstring',
  'too-many-branches',
  'too-many-nested-blocks',
  'too-many-return-statements',
  'too-many-statements',
  'too-many-locals',
]

[tool.bandit]
exclude_dirs = ['node_modules']
skips = [
  'B113', # Handled by pylint; bandit incorrectly flags requests_mock for timeout
  'B608', # Raw SQL detector is noisy for migrations and not configurable
]

[tool.bandit.assert_used]
skips = ['**/*_test.py', '**/test_*.py', '**/conftest.py']

[tool.ruff]
# This is a slight customisation of the default rules
# 1. Rule E402 (module-level import not top-level) is disabled as isort handles it
# 2. Rule E501 (line too long) is left to Black; some strings are worse for wrapping

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = ["E402", "E501"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Target Python 3.11
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
# These config options should match isort config above under [tool.isort]
combine-as-imports = true
split-on-trailing-comma = false
relative-imports-order = 'furthest-to-closest'
known-first-party = ['baseframe', 'coaster', 'flask_lastuser']
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'repo',
  'local-folder',
]

[tool.ruff.isort.sections]
repo = ['funnel']
