"""Replace 'allow' columns with 'has' columns.

Revision ID: 2151c9f8e955
Revises: 83b6643891ec
Create Date: 2023-02-08 00:16:05.035943

"""

from typing import Optional, Tuple, Union

from alembic import op
from sqlalchemy.dialects import postgresql
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '2151c9f8e955'
down_revision: str = '83b6643891ec'
branch_labels: Optional[Union[str, Tuple[str, ...]]] = None
depends_on: Optional[Union[str, Tuple[str, ...]]] = None


def upgrade(engine_name='') -> None:
    """Upgrade all databases."""
    # Do not modify. Edit `upgrade_` instead
    globals().get(f'upgrade_{engine_name}', lambda: None)()


def downgrade(engine_name='') -> None:
    """Downgrade all databases."""
    # Do not modify. Edit `downgrade_` instead
    globals().get(f'downgrade_{engine_name}', lambda: None)()


def upgrade_() -> None:
    """Upgrade database bind ''."""
    with op.batch_alter_table('phone_number', schema=None) as batch_op:
        batch_op.add_column(sa.Column('has_sms', sa.Boolean(), nullable=True))
        batch_op.add_column(
            sa.Column('has_sms_at', sa.TIMESTAMP(timezone=True), nullable=True)
        )
        batch_op.add_column(sa.Column('has_wa', sa.Boolean(), nullable=True))
        batch_op.add_column(
            sa.Column('has_wa_at', sa.TIMESTAMP(timezone=True), nullable=True)
        )
        batch_op.drop_column('allow_sm')
        batch_op.drop_column('allow_wa')
        batch_op.drop_column('allow_sms')
        batch_op.drop_column('msg_sm_delivered_at')
        batch_op.drop_column('msg_sm_sent_at')
        batch_op.drop_column('msg_sm_failed_at')
        batch_op.drop_constraint('phone_number_blocked_at_number_check', type_='check')
        batch_op.create_check_constraint(
            'phone_number_blocked_check',
            'blocked_at IS NULL'
            ' OR blocked_at IS NOT NULL AND number IS NULL'
            ' AND has_sms IS NULL AND has_sms_at IS NULL'
            ' AND has_wa IS NULL AND has_wa_at IS NULL',
        )
        batch_op.create_check_constraint(
            'phone_number_has_sms_check',
            'has_sms IS NULL AND has_sms_at IS NULL'
            ' OR has_sms IS NOT NULL AND has_sms_at IS NOT NULL',
        )
        batch_op.create_check_constraint(
            'phone_number_has_wa_check',
            'has_wa IS NULL AND has_wa_at IS NULL'
            ' OR has_wa IS NOT NULL AND has_wa_at IS NOT NULL',
        )

    with op.batch_alter_table('user_email', schema=None) as batch_op:
        batch_op.drop_column('type')

    with op.batch_alter_table('user_email_claim', schema=None) as batch_op:
        batch_op.drop_column('type')

    with op.batch_alter_table('user_phone', schema=None) as batch_op:
        batch_op.drop_column('type')


def downgrade_() -> None:
    """Downgrade database bind ''."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_phone', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('type', sa.VARCHAR(length=30), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table('user_email_claim', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('type', sa.VARCHAR(length=30), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table('user_email', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('type', sa.VARCHAR(length=30), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table('phone_number', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                'msg_sm_failed_at',
                postgresql.TIMESTAMP(timezone=True),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                'msg_sm_sent_at',
                postgresql.TIMESTAMP(timezone=True),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                'msg_sm_delivered_at',
                postgresql.TIMESTAMP(timezone=True),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                'allow_sms',
                sa.BOOLEAN(),
                autoincrement=False,
                nullable=False,
                server_default=sa.sql.expression.true(),
            )
        )
        batch_op.alter_column('allow_sms', server_default=None)
        batch_op.add_column(
            sa.Column(
                'allow_wa',
                sa.BOOLEAN(),
                autoincrement=False,
                nullable=False,
                server_default=sa.sql.expression.false(),
            )
        )
        batch_op.alter_column('allow_wa', server_default=None)
        batch_op.add_column(
            sa.Column(
                'allow_sm',
                sa.BOOLEAN(),
                autoincrement=False,
                nullable=False,
                server_default=sa.sql.expression.false(),
            )
        )
        batch_op.alter_column('allow_sm', server_default=None)
        batch_op.drop_constraint('phone_number_has_wa_check', type_='check')
        batch_op.drop_constraint('phone_number_has_sms_check', type_='check')
        batch_op.drop_constraint('phone_number_blocked_check', type_='check')
        batch_op.drop_column('has_wa_at')
        batch_op.drop_column('has_wa')
        batch_op.drop_column('has_sms_at')
        batch_op.drop_column('has_sms')
        batch_op.create_check_constraint(
            'phone_number_blocked_at_number_check',
            'blocked_at IS NULL OR blocked_at IS NOT NULL AND number IS NULL',
        )


def upgrade_geoname() -> None:
    """Upgrade database bind 'geoname'."""


def downgrade_geoname() -> None:
    """Downgrade database bind 'geoname'."""
