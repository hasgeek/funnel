"""Account model with subtypes, and account-linked personal data models."""

from __future__ import annotations

import hashlib
import itertools
from datetime import datetime, timedelta
from typing import Iterable, Iterator, List, Optional, Set, Union, cast, overload
from typing_extensions import Literal
from uuid import UUID

import phonenumbers
from babel import Locale
from furl import furl
from passlib.hash import argon2, bcrypt
from pytz.tzinfo import BaseTzInfo
from sqlalchemy.ext.associationproxy import AssociationProxy, association_proxy
from sqlalchemy.ext.hybrid import Comparator
from sqlalchemy.sql.expression import ColumnElement
from werkzeug.utils import cached_property
from zbase32 import decode as zbase32_decode, encode as zbase32_encode

from baseframe import __
from coaster.sqlalchemy import (
    LazyRoleSet,
    RoleMixin,
    StateManager,
    add_primary_relationship,
    auto_init_default,
    failsafe_add,
    immutable,
    with_roles,
)
from coaster.utils import LabeledEnum, newsecret, require_one_of, utcnow

from ..typing import OptionalMigratedTables
from . import (
    BaseMixin,
    DynamicMapped,
    LocaleType,
    Mapped,
    Model,
    Query,
    TimezoneType,
    TSVectorType,
    UrlType,
    UuidMixin,
    backref,
    db,
    hybrid_property,
    relationship,
    sa,
)
from .email_address import EmailAddress, EmailAddressMixin
from .helpers import (
    RESERVED_NAMES,
    ImgeeType,
    MarkdownCompositeDocument,
    add_search_trigger,
    quote_autocomplete_like,
    quote_autocomplete_tsquery,
    valid_account_name,
    visual_field_delimiter,
)
from .phone_number import PhoneNumber, PhoneNumberMixin

__all__ = [
    'ACCOUNT_STATE',
    'deleted_account',
    'removed_account',
    'unknown_account',
    'User',
    'DuckTypeAccount',
    'AccountOldId',
    'Organization',
    'Team',
    'Placeholder',
    'AccountEmail',
    'AccountEmailClaim',
    'AccountPhone',
    'AccountExternalId',
    'Anchor',
]


class ACCOUNT_STATE(LabeledEnum):  # noqa: N801
    """State codes for accounts."""

    #: Regular, active account
    ACTIVE = (1, __("Active"))
    #: Suspended account (cause and explanation not included here)
    SUSPENDED = (2, __("Suspended"))
    #: Merged into another account
    MERGED = (3, __("Merged"))
    #: Permanently deleted account
    DELETED = (5, __("Deleted"))

    #: This account is gone
    GONE = {MERGED, DELETED}


class PROFILE_STATE(LabeledEnum):  # noqa: N801
    """The visibility state of an account (auto/public/private)."""

    AUTO = (1, 'auto', __("Autogenerated"))
    PUBLIC = (2, 'public', __("Public"))
    PRIVATE = (3, 'private', __("Private"))

    NOT_PUBLIC = {AUTO, PRIVATE}
    NOT_PRIVATE = {AUTO, PUBLIC}


class ZBase32Comparator(Comparator[str]):  # pylint: disable=abstract-method
    """Comparator to allow lookup by Account.uuid_zbase32."""

    def __eq__(self, other: str) -> sa.ColumnElement[bool]:  # type: ignore[override]
        """Return an expression for column == other."""
        return self.__clause_element__() == UUID(bytes=zbase32_decode(other))


class Account(UuidMixin, BaseMixin, Model):
    """Account model."""

    __tablename__ = 'account'
    __allow_unmapped__ = True
    # Name has a length limit 63 to fit DNS label limit
    __name_length__ = 63
    # Titles can be longer
    __title_length__ = 80

    __active_membership_attrs__: Set[str] = set()
    __noninvite_membership_attrs__: Set[str] = set()

    # Helper flags (see subclasses)
    is_user_profile: bool = False
    is_organization_profile: bool = False
    is_placeholder_profile: bool = False

    reserved_names: Set[str] = RESERVED_NAMES

    type_: Mapped[str] = sa.orm.mapped_column('type', sa.CHAR(1), nullable=False)

    #: Join date for users and organizations (skipped for placeholders)
    joined_at: Mapped[Optional[datetime]] = sa.orm.mapped_column(
        sa.TIMESTAMP(timezone=True), nullable=True
    )

    #: The optional "username", used in the URL stub, with a unique constraint on the
    #: lowercase value (defined in __table_args__ below)
    name: Mapped[Optional[str]] = with_roles(
        sa.orm.mapped_column(
            sa.Unicode(__name_length__),
            sa.CheckConstraint("name <> ''"),
            nullable=True,
        ),
        read={'all'},
    )

    #: The account's title (user's fullname)
    title: Mapped[str] = with_roles(
        sa.orm.mapped_column(sa.Unicode(__title_length__), default='', nullable=False),
        read={'all'},
    )
    #: Alias title as user's fullname
    fullname: Mapped[str] = sa.orm.synonym('title')
    #: Alias name as user's username
    username: Mapped[str] = sa.orm.synonym('name')

    #: Argon2 or Bcrypt hash of the user's password
    pw_hash: Mapped[Optional[str]] = sa.orm.mapped_column(sa.Unicode, nullable=True)
    #: Timestamp for when the user's password last changed
    pw_set_at: Mapped[Optional[datetime]] = sa.orm.mapped_column(
        sa.TIMESTAMP(timezone=True), nullable=True
    )
    #: Expiry date for the password (to prompt user to reset it)
    pw_expires_at: Mapped[Optional[datetime]] = sa.orm.mapped_column(
        sa.TIMESTAMP(timezone=True), nullable=True
    )
    #: User's preferred/last known timezone
    timezone: Mapped[Optional[BaseTzInfo]] = with_roles(
        sa.orm.mapped_column(TimezoneType(backend='pytz'), nullable=True),
        read={'owner'},
    )
    #: Update timezone automatically from browser activity
    auto_timezone: Mapped[bool] = sa.orm.mapped_column(
        sa.Boolean, default=True, nullable=False
    )
    #: User's preferred/last known locale
    locale: Mapped[Optional[Locale]] = with_roles(
        sa.orm.mapped_column(LocaleType, nullable=True), read={'owner'}
    )
    #: Update locale automatically from browser activity
    auto_locale: Mapped[bool] = sa.orm.mapped_column(
        sa.Boolean, default=True, nullable=False
    )
    #: User's state code (active, suspended, merged, deleted)
    _state: Mapped[int] = sa.orm.mapped_column(
        'state',
        sa.SmallInteger,
        StateManager.check_constraint('state', ACCOUNT_STATE),
        nullable=False,
        default=ACCOUNT_STATE.ACTIVE,
    )
    #: Account state manager
    state = StateManager('_state', ACCOUNT_STATE, doc="Account state")
    #: Other accounts that were merged into this account
    old_accounts: AssociationProxy[List[Account]] = association_proxy(
        'oldids', 'old_account'
    )

    _profile_state: Mapped[int] = sa.orm.mapped_column(
        'profile_state',
        sa.SmallInteger,
        StateManager.check_constraint('profile_state', PROFILE_STATE),
        nullable=False,
        default=PROFILE_STATE.AUTO,
    )
    profile_state = StateManager(
        '_profile_state', PROFILE_STATE, doc="Current state of the account profile"
    )

    tagline: Mapped[Optional[str]] = sa.orm.mapped_column(
        sa.Unicode, sa.CheckConstraint("tagline <> ''"), nullable=True
    )
    description, description_text, description_html = MarkdownCompositeDocument.create(
        'description', default='', nullable=False
    )
    website: Mapped[Optional[furl]] = sa.orm.mapped_column(
        UrlType, sa.CheckConstraint("website <> ''"), nullable=True
    )
    logo_url: Mapped[Optional[furl]] = sa.orm.mapped_column(
        ImgeeType, sa.CheckConstraint("logo_url <> ''"), nullable=True
    )
    banner_image_url: Mapped[Optional[furl]] = sa.orm.mapped_column(
        ImgeeType, sa.CheckConstraint("banner_image_url <> ''"), nullable=True
    )

    # These two flags are read-only. There is no provision for writing to them within
    # the app:

    #: Protected accounts cannot be deleted
    is_protected: Mapped[bool] = with_roles(
        immutable(sa.orm.mapped_column(sa.Boolean, default=False, nullable=False)),
        read={'owner', 'admin'},
    )
    #: Verified accounts get listed on the home page and are not considered throwaway
    #: accounts for spam control. There are no other privileges at this time
    is_verified: Mapped[bool] = with_roles(
        immutable(
            sa.orm.mapped_column(sa.Boolean, default=False, nullable=False, index=True)
        ),
        read={'all'},
    )

    #: Revision number maintained by SQLAlchemy, starting at 1
    revisionid: Mapped[int] = with_roles(
        sa.orm.mapped_column(sa.Integer, nullable=False), read={'all'}
    )

    search_vector: Mapped[str] = sa.orm.mapped_column(
        TSVectorType(
            'title',
            'name',
            'tagline',
            'description_text',
            weights={
                'title': 'A',
                'name': 'A',
                'tagline': 'B',
                'description_text': 'B',
            },
            regconfig='english',
            hltext=lambda: sa.func.concat_ws(
                visual_field_delimiter,
                Account.title,
                Account.name,
                Account.tagline,
                Account.description_html,
            ),
        ),
        nullable=False,
        deferred=True,
    )

    name_vector: Mapped[str] = sa.orm.mapped_column(
        TSVectorType(
            'title',
            'name',
            regconfig='simple',
            hltext=lambda: sa.func.concat_ws(' @', Account.title, Account.name),
        ),
        nullable=False,
        deferred=True,
    )

    __table_args__ = (
        sa.Index(
            'ix_account_name_lower',
            sa.func.lower(name).label('name_lower'),
            unique=True,
            postgresql_ops={'name_lower': 'varchar_pattern_ops'},
        ),
        sa.Index(
            'ix_account_title_lower',
            sa.func.lower(title).label('title_lower'),
            postgresql_ops={'title_lower': 'varchar_pattern_ops'},
        ),
        sa.Index('ix_account_search_vector', 'search_vector', postgresql_using='gin'),
        sa.Index('ix_account_name_vector', 'name_vector', postgresql_using='gin'),
    )

    __mapper_args__ = {
        # 'polymorphic_identity' from subclasses is stored in the type column
        'polymorphic_on': type_,
        # When querying the Account model, cast automatically to all subclasses
        'with_polymorphic': '*',
        'version_id_col': revisionid,
    }

    __roles__ = {
        'all': {
            'read': {
                'uuid',
                'name',
                'urlname',
                'title',
                'fullname',
                'username',
                'pickername',
                'timezone',
                'description',
                'website',
                'logo_url',
                'banner_image_url',
                'joined_at',
                'profile_url',
                'urls',
                'is_user_profile',
                'is_organization_profile',
                'is_placeholder_profile',
            },
            'call': {'views', 'forms', 'features', 'url_for', 'state', 'profile_state'},
        }
    }

    __datasets__ = {
        'primary': {
            'urls',
            'uuid_b58',
            'name',
            'urlname',
            'title',
            'fullname',
            'username',
            'pickername',
            'timezone',
            'description',
            'logo_url',
            'website',
            'joined_at',
            'profile_url',
            'is_verified',
        },
        'related': {
            'urls',
            'uuid_b58',
            'name',
            'urlname',
            'title',
            'fullname',
            'username',
            'pickername',
            'timezone',
            'description',
            'logo_url',
            'joined_at',
            'profile_url',
            'is_verified',
        },
    }

    profile_state.add_conditional_state(
        'ACTIVE_AND_PUBLIC',
        profile_state.PUBLIC,
        lambda account: bool(account.state.ACTIVE),
    )

    @classmethod
    def _defercols(cls) -> List[sa.orm.interfaces.LoaderOption]:
        """Return columns that are typically deferred when loading a user."""
        defer = sa.orm.defer
        return [
            defer(cls.created_at),
            defer(cls.updated_at),
            defer(cls.pw_hash),
            defer(cls.pw_set_at),
            defer(cls.pw_expires_at),
            defer(cls.timezone),
        ]

    primary_email: Optional[AccountEmail]
    primary_phone: Optional[AccountPhone]

    def __repr__(self) -> str:
        if self.name:
            return f'<{self.__class__.__name__} {self.title} @{self.name}>'
        return f'<{self.__class__.__name__} {self.title}>'

    def __str__(self) -> str:
        """Return picker name for account."""
        return self.pickername

    def __format__(self, format_spec: str) -> str:
        if not format_spec:
            return self.pickername
        return self.pickername.__format__(format_spec)

    @property
    def pickername(self) -> str:
        """Return title and @name in a format suitable for identification."""
        if self.name:
            return f'{self.title} (@{self.name})'
        return self.title

    with_roles(pickername, read={'all'})

    def roles_for(
        self, actor: Optional[Account] = None, anchors: Iterable = ()
    ) -> LazyRoleSet:
        """Identify roles for the given actor."""
        roles = super().roles_for(actor, anchors)
        if self.profile_state.ACTIVE_AND_PUBLIC:
            roles.add('reader')
        return roles

    @cached_property
    def verified_contact_count(self) -> int:
        """Count of verified contact details."""
        return len(self.emails) + len(self.phones)

    @property
    def has_verified_contact_info(self) -> bool:
        """User has any verified contact info (email or phone)."""
        return bool(self.emails) or bool(self.phones)

    @property
    def has_contact_info(self) -> bool:
        """User has any contact information (including unverified)."""
        return self.has_verified_contact_info or bool(self.emailclaims)

    def merged_account(self) -> Account:
        """Return the account that this account was merged into (default: self)."""
        if self.state.MERGED:
            # If our state is MERGED, there _must_ be a corresponding AccountOldId
            # record
            return cast(AccountOldId, AccountOldId.get(self.uuid)).account
        return self

    def _set_password(self, password: Optional[str]):
        """Set a password (write-only property)."""
        if password is None:
            self.pw_hash = None
        else:
            self.pw_hash = argon2.hash(password)
            # Also see :meth:`password_is` for transparent upgrade
        self.pw_set_at = sa.func.utcnow()
        # Expire passwords after one year. TODO: make this configurable
        self.pw_expires_at = self.pw_set_at + timedelta(days=365)

    #: Write-only property (passwords cannot be read back in plain text)
    password = property(fset=_set_password, doc=_set_password.__doc__)

    def password_has_expired(self) -> bool:
        """Verify if password expiry timestamp has passed."""
        return (
            self.pw_hash is not None
            and self.pw_expires_at is not None
            and self.pw_expires_at <= utcnow()
        )

    def password_is(self, password: str, upgrade_hash: bool = False) -> bool:
        """Test if the candidate password matches saved hash."""
        if self.pw_hash is None:
            return False

        # Passwords may use the current Argon2 scheme or the older Bcrypt scheme.
        # Bcrypt passwords are transparently upgraded if requested.
        if argon2.identify(self.pw_hash):
            return argon2.verify(password, self.pw_hash)
        if bcrypt.identify(self.pw_hash):
            verified = bcrypt.verify(password, self.pw_hash)
            if verified and upgrade_hash:
                self.pw_hash = argon2.hash(password)
            return verified
        return False

    def add_email(
        self,
        email: str,
        primary: bool = False,
        private: bool = False,
    ) -> AccountEmail:
        """Add an email address (assumed to be verified)."""
        accountemail = AccountEmail(account=self, email=email, private=private)
        accountemail = cast(
            AccountEmail,
            failsafe_add(
                db.session,
                accountemail,
                account=self,
                email_address=accountemail.email_address,
            ),
        )
        if primary:
            self.primary_email = accountemail
        return accountemail
        # FIXME: This should remove competing instances of AccountEmailClaim

    def del_email(self, email: str) -> None:
        """Remove an email address from the user's account."""
        accountemail = AccountEmail.get_for(account=self, email=email)
        if accountemail is not None:
            if self.primary_email in (accountemail, None):
                self.primary_email = (
                    AccountEmail.query.filter(
                        AccountEmail.account == self, AccountEmail.id != accountemail.id
                    )
                    .order_by(AccountEmail.created_at.desc())
                    .first()
                )
            db.session.delete(accountemail)

    @property
    def email(self) -> Union[Literal[''], AccountEmail]:
        """Return primary email address for user."""
        # Look for a primary address
        accountemail = self.primary_email
        if accountemail is not None:
            return accountemail
        # No primary? Maybe there's one that's not set as primary?
        if self.emails:
            accountemail = self.emails[0]
            # XXX: Mark as primary. This may or may not be saved depending on
            # whether the request ended in a database commit.
            self.primary_email = accountemail
            return accountemail
        # This user has no email address. Return a blank string instead of None
        # to support the common use case, where the caller will use str(user.email)
        # to get the email address as a string.
        return ''

    with_roles(email, read={'owner'})

    def add_phone(
        self,
        phone: str,
        primary: bool = False,
        private: bool = False,
    ) -> AccountPhone:
        """Add a phone number (assumed to be verified)."""
        accountphone = AccountPhone(account=self, phone=phone, private=private)
        accountphone = cast(
            AccountPhone,
            failsafe_add(
                db.session,
                accountphone,
                account=self,
                phone_number=accountphone.phone_number,
            ),
        )
        if primary:
            self.primary_phone = accountphone
        return accountphone

    def del_phone(self, phone: str) -> None:
        """Remove a phone number from the user's account."""
        accountphone = AccountPhone.get_for(account=self, phone=phone)
        if accountphone is not None:
            if self.primary_phone in (accountphone, None):
                self.primary_phone = (
                    AccountPhone.query.filter(
                        AccountPhone.account == self, AccountPhone.id != accountphone.id
                    )
                    .order_by(AccountPhone.created_at.desc())
                    .first()
                )
            db.session.delete(accountphone)

    @property
    def phone(self) -> Union[Literal[''], AccountPhone]:
        """Return primary phone number for user."""
        # Look for a primary phone number
        accountphone = self.primary_phone
        if accountphone is not None:
            return accountphone
        # No primary? Maybe there's one that's not set as primary?
        if self.phones:
            accountphone = self.phones[0]
            # XXX: Mark as primary. This may or may not be saved depending on
            # whether the request ended in a database commit.
            self.primary_phone = accountphone
            return accountphone
        # This user has no phone number. Return a blank string instead of None
        # to support the common use case, where the caller will use str(user.phone)
        # to get the phone number as a string.
        return ''

    with_roles(phone, read={'owner'})

    @property
    def has_public_profile(self) -> bool:
        """Return the visibility state of an account."""
        return self.name is not None and bool(self.profile_state.ACTIVE_AND_PUBLIC)

    with_roles(has_public_profile, read={'all'}, write={'owner'})

    @property
    def profile_url(self) -> Optional[str]:
        """Return optional URL to account profile page."""
        return self.url_for(_external=True)

    with_roles(profile_url, read={'all'})

    def is_profile_complete(self) -> bool:
        """Verify if profile is complete (fullname, username and contacts present)."""
        return bool(self.title and self.name and self.has_verified_contact_info)

    def active_memberships(self) -> Iterator[ImmutableMembershipMixin]:
        """Enumerate all active memberships."""
        # Each collection is cast into a list before chaining to ensure that it does not
        # change during processing (if, for example, membership is revoked or replaced).
        return itertools.chain(
            *(list(getattr(self, attr)) for attr in self.__active_membership_attrs__)
        )

    def has_any_memberships(self) -> bool:
        """
        Test for any non-invite membership records that must be preserved.

        This is used to test for whether the account is safe to purge (hard delete) from
        the database. If non-invite memberships are present, the account cannot be
        purged as immutable records must be preserved. Instead, the account must be put
        into DELETED state with all PII scrubbed.
        """
        return any(
            db.session.query(getattr(self, attr).exists()).scalar()
            for attr in self.__noninvite_membership_attrs__
        )

    # --- Transport details

    @with_roles(call={'owner'})
    def has_transport_email(self) -> bool:
        """User has an email transport address."""
        return self.state.ACTIVE and bool(self.email)

    @with_roles(call={'owner'})
    def has_transport_sms(self) -> bool:
        """User has an SMS transport address."""
        return (
            self.state.ACTIVE
            and self.phone != ''
            and self.phone.phone_number.has_sms is not False
        )

    @with_roles(call={'owner'})
    def has_transport_webpush(self) -> bool:  # TODO  # pragma: no cover
        """User has a webpush transport address."""
        return False

    @with_roles(call={'owner'})
    def has_transport_telegram(self) -> bool:  # TODO  # pragma: no cover
        """User has a Telegram transport address."""
        return False

    @with_roles(call={'owner'})
    def has_transport_whatsapp(self) -> bool:
        """User has a WhatsApp transport address."""
        return (
            self.state.ACTIVE
            and self.phone != ''
            and self.phone.phone_number.has_wa is not False
        )

    @with_roles(call={'owner'})
    def transport_for_email(
        self, context: Optional[Model] = None
    ) -> Optional[AccountEmail]:
        """Return user's preferred email address within a context."""
        # TODO: Per-account/project customization is a future option
        if self.state.ACTIVE:
            return self.email or None
        return None

    @with_roles(call={'owner'})
    def transport_for_sms(
        self, context: Optional[Model] = None
    ) -> Optional[AccountPhone]:
        """Return user's preferred phone number within a context."""
        # TODO: Per-account/project customization is a future option
        if (
            self.state.ACTIVE
            and self.phone != ''
            and self.phone.phone_number.has_sms is not False
        ):
            return self.phone
        return None

    @with_roles(call={'owner'})
    def transport_for_webpush(
        self, context: Optional[Model] = None
    ):  # TODO  # pragma: no cover
        """Return user's preferred webpush transport address within a context."""
        return None

    @with_roles(call={'owner'})
    def transport_for_telegram(
        self, context: Optional[Model] = None
    ):  # TODO  # pragma: no cover
        """Return user's preferred Telegram transport address within a context."""
        return None

    @with_roles(call={'owner'})
    def transport_for_whatsapp(self, context: Optional[Model] = None):
        """Return user's preferred WhatsApp transport address within a context."""
        # TODO: Per-account/project customization is a future option
        if self.state.ACTIVE and self.phone != '' and self.phone.phone_number.allow_wa:
            return self.phone
        return None

    @with_roles(call={'owner'})
    def transport_for_signal(self, context: Optional[Model] = None):
        """Return user's preferred Signal transport address within a context."""
        # TODO: Per-account/project customization is a future option
        if self.state.ACTIVE and self.phone != '' and self.phone.phone_number.allow_sm:
            return self.phone
        return None

    @with_roles(call={'owner'})
    def has_transport(self, transport: str) -> bool:
        """
        Verify if user has a given transport address.

        Helper method to call ``self.has_transport_<transport>()``.

        ..note::
            Because this method does not accept a context, it may return True for a
            transport that has been muted in that context. This may cause an empty
            background job to be queued for a notification. Revisit this method when
            preference contexts are supported.
        """
        return getattr(self, 'has_transport_' + transport)()

    @with_roles(call={'owner'})
    def transport_for(
        self, transport: str, context: Optional[Model] = None
    ) -> Optional[Union[AccountEmail, AccountPhone]]:
        """
        Get transport address for a given transport and context.

        Helper method to call ``self.transport_for_<transport>(context)``.
        """
        return getattr(self, 'transport_for_' + transport)(context)

    def default_email(
        self, context: Optional[Model] = None
    ) -> Optional[Union[AccountEmail, AccountEmailClaim]]:
        """
        Return default email address (verified if present, else unverified).

        ..note::
            This is a temporary helper method, pending merger of
            :class:`AccountEmailClaim` into :class:`AccountEmail` with
            :attr:`~AccountEmail.verified` ``== False``. The appropriate replacement is
            :meth:`Account.transport_for_email` with a context.
        """
        email = self.transport_for_email(context=context)
        if email:
            return email
        # Fallback when ``transport_for_email`` returns None
        if self.email:
            return self.email
        if self.emailclaims:
            return self.emailclaims[0]
        # This user has no email addresses
        return None

    @property
    def _self_is_owner_and_admin_of_self(self) -> Account:
        """
        Return self.

        Helper method for :meth:`roles_for` and :meth:`actors_with` to assert that the
        user is owner and admin of their own account.
        """
        return self

    with_roles(_self_is_owner_and_admin_of_self, grants={'owner', 'admin'})

    def organizations_as_owner_ids(self) -> List[int]:
        """
        Return the database ids of the organizations this user is an owner of.

        This is used for database queries.
        """
        return [
            membership.account_id
            for membership in self.active_organization_owner_memberships
        ]

    @state.transition(state.ACTIVE, state.MERGED)
    def mark_merged_into(self, other_account):
        """Mark account as merged into another account."""
        db.session.add(AccountOldId(id=self.uuid, account=other_account))

    @state.transition(state.ACTIVE, state.SUSPENDED)
    def mark_suspended(self):
        """Mark account as suspended on support or moderator request."""

    @state.transition(state.SUSPENDED, state.ACTIVE)
    def mark_active(self):
        """Restore a suspended account to active state."""

    @state.transition(state.ACTIVE, state.DELETED)
    def do_delete(self):
        """Delete account."""
        # 0: Safety check
        if not self.is_safe_to_delete():
            raise ValueError("Account cannot be deleted")

        # 1. Delete contact information
        for contact_source in (
            self.emails,
            self.emailclaims,
            self.phones,
            self.externalids,
        ):
            for contact in contact_source:
                db.session.delete(contact)

        # 2. Revoke all active memberships
        for membership in self.active_memberships():
            membership = membership.freeze_member_attribution(self)
            if membership.revoke_on_member_delete:
                membership.revoke(actor=self)
        # TODO: freeze fullname in unrevoked memberships (pending title column there)
        if (
            self.active_site_membership
            and self.active_site_membership.revoke_on_member_delete
        ):
            self.active_site_membership.revoke(actor=self)

        # 3. Drop all team memberships
        self.member_teams.clear()

        # 4. Revoke auth tokens
        self.revoke_all_auth_tokens()  # Defined in auth_client.py
        self.revoke_all_auth_client_permissions()  # Same place

        # 5. Revoke all active login sessions
        for login_session in self.active_login_sessions:
            login_session.revoke()

        # 6. Clear name (username), title (fullname) and stored password hash
        self.name = None
        self.title = ''

        # 7. Unassign tickets assigned to the user
        self.ticket_participants = []  # pylint: disable=attribute-defined-outside-init

        # 8. Clear fullname and stored password hash
        self.fullname = ''
        self.password = None

    @with_roles(call={'owner'})
    @profile_state.transition(
        profile_state.NOT_PUBLIC,
        profile_state.PUBLIC,
        title=__("Make public"),
    )
    @state.requires(state.ACTIVE)
    def make_profile_public(self) -> None:
        """Make an account public if it is eligible."""

    @with_roles(call={'owner'})
    @profile_state.transition(
        profile_state.NOT_PRIVATE, profile_state.PRIVATE, title=__("Make private")
    )
    def make_profile_private(self) -> None:
        """Make an account private."""

    def is_safe_to_delete(self) -> bool:
        """Test if account is not protected and has no projects."""
        return self.is_protected is False and self.projects.count() == 0

    def is_safe_to_purge(self) -> bool:
        """Test if account is safe to delete and has no memberships (active or not)."""
        return self.is_safe_to_delete() and not self.has_any_memberships()

    @property
    def urlname(self) -> str:
        """Return :attr:`name` or ``~``-prefixed :attr:`uuid_zbase32`."""
        if self.name is not None:
            return self.name
        return f'~{self.uuid_zbase32}'

    @hybrid_property
    def uuid_zbase32(self) -> str:
        """Account UUID rendered in z-Base-32."""
        return zbase32_encode(self.uuid.bytes)

    @uuid_zbase32.inplace.comparator
    @classmethod
    def _uuid_zbase32_comparator(cls) -> ZBase32Comparator:
        """Return SQL comparator for :prop:`uuid_zbase32`."""
        return ZBase32Comparator(cls.uuid)

    @classmethod
    def name_is(cls, name: str) -> ColumnElement:
        """Generate query filter to check if name is matching (case insensitive)."""
        if name.startswith('~'):
            return cls.uuid_zbase32 == name[1:]
        return sa.func.lower(cls.name) == sa.func.lower(sa.func.replace(name, '-', '_'))

    @classmethod
    def name_in(cls, names: Iterable[str]) -> ColumnElement:
        """Generate query flter to check if name is among candidates."""
        return sa.func.lower(cls.name).in_(
            [name.lower().replace('-', '_') for name in names]
        )

    @classmethod
    def name_like(cls, like_query: str) -> ColumnElement:
        """Generate query filter for a LIKE query on name."""
        return sa.func.lower(cls.name).like(
            sa.func.lower(sa.func.replace(like_query, '-', r'\_'))
        )

    @overload
    @classmethod
    def get(
        cls,
        *,
        name: str,
        defercols: bool = False,
    ) -> Optional[Account]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        *,
        buid: str,
        defercols: bool = False,
    ) -> Optional[Account]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        *,
        userid: str,
        defercols: bool = False,
    ) -> Optional[Account]:
        ...

    @classmethod
    def get(
        cls,
        *,
        name: Optional[str] = None,
        buid: Optional[str] = None,
        userid: Optional[str] = None,
        defercols: bool = False,
    ) -> Optional[Account]:
        """
        Return an Account with the given name or buid.

        :param str name: Username to lookup
        :param str buid: Buid to lookup
        :param bool defercols: Defer loading non-critical columns
        """
        require_one_of(name=name, buid=buid, userid=userid)

        # userid parameter is temporary for Flask-Lastuser compatibility
        if userid:
            buid = userid

        if name is not None:
            query = cls.query.filter(cls.name_is(name))
        else:
            query = cls.query.filter_by(buid=buid)
        if cls is not Account:
            query = query.filter(
                cls.type == cls.__mapper_args__['polymorphic_identity']
            )
        if defercols:
            query = query.options(*cls._defercols())
        account = query.one_or_none()
        if account and account.state.MERGED:
            account = account.merged_account()
        if account and account.state.ACTIVE:
            return account
        return None

    @classmethod
    def all(  # noqa: A003
        cls,
        buids: Optional[Iterable[str]] = None,
        names: Optional[Iterable[str]] = None,
        defercols: bool = False,
    ) -> List[Account]:
        """
        Return all matching accounts.

        :param list buids: Buids to look up
        :param list names: Names (usernames) to look up
        :param bool defercols: Defer loading non-critical columns
        """
        accounts = set()
        if buids and names:
            query = cls.query.filter(sa.or_(cls.buid.in_(buids), cls.name_in(names)))
        elif buids:
            query = cls.query.filter(cls.buid.in_(buids))
        elif names:
            query = cls.query.filter(cls.name_in(names))
        else:
            return []
        if cls is not Account:
            query = query.filter(
                cls.type == cls.__mapper_args__['polymorphic_identity']
            )

        if defercols:
            query = query.options(*cls._defercols())
        for account in query.all():
            account = account.merged_account()
            if account.state.ACTIVE:
                accounts.add(account)
        return list(accounts)

    @classmethod
    def all_public(cls) -> Query:
        """Construct a query filtered by public profile state."""
        query = cls.query.filter(cls.profile_state.PUBLIC)
        if cls is not Account:
            query = query.filter(
                cls.type == cls.__mapper_args__['polymorphic_identity']
            )
        return query

    @classmethod
    def autocomplete(cls, prefix: str) -> List[Account]:
        """
        Return accounts whose names begin with the prefix, for autocomplete UI.

        Looks up accounts by title, name, external ids and email addresses.

        :param prefix: Letters to start matching with
        """
        like_query = quote_autocomplete_like(prefix)
        if not like_query or like_query == '@%':
            return []
        tsquery = quote_autocomplete_tsquery(prefix)

        # base_users is used in two of the three possible queries below
        base_users = cls.query.filter(
            cls.state.ACTIVE,
            cls.name_vector.bool_op('@@')(tsquery),
        )

        if cls is not Account:
            base_users = base_users.filter(
                cls.type == cls.__mapper_args__['polymorphic_identity']
            )
        base_users = (
            base_users.options(*cls._defercols()).order_by(Account.title).limit(20)
        )

        if (
            prefix != '@'
            and prefix.startswith('@')
            and AccountExternalId.__at_username_services__
        ):
            # @-prefixed, so look for usernames, including other @username-using
            # services like Twitter and GitHub. Make a union of three queries.
            users = (
                # Query 1: @query -> Account.name
                cls.query.filter(
                    cls.state.ACTIVE,
                    cls.name_like(like_query[1:]),
                )
                .options(*cls._defercols())
                .limit(20)
                # FIXME: Still broken as of SQLAlchemy 1.4.23 (also see next block)
                # .union(
                #     # Query 2: @query -> UserExternalId.username
                #     cls.query.join(UserExternalId)
                #     .filter(
                #         cls.state.ACTIVE,
                #         UserExternalId.service.in_(
                #             UserExternalId.__at_username_services__
                #         ),
                #         sa.func.lower(UserExternalId.username).like(
                #             sa.func.lower(like_query[1:])
                #         ),
                #     )
                #     .options(*cls._defercols())
                #     .limit(20),
                #     # Query 3: like_query -> Account.title
                #     cls.query.filter(
                #         cls.state.ACTIVE,
                #         sa.func.lower(cls.title).like(sa.func.lower(like_query)),
                #     )
                #     .options(*cls._defercols())
                #     .limit(20),
                # )
                .all()
            )
        elif '@' in prefix and not prefix.startswith('@'):
            # Query has an @ in the middle. Match email address (exact match only).
            # Use param `prefix` instead of `like_query` because it's not a LIKE query.
            # Combine results with regular user search
            email_filter = EmailAddress.get_filter(email=prefix)
            if email_filter is not None:
                users = (
                    cls.query.join(AccountEmail)
                    .join(EmailAddress)
                    .filter(email_filter, cls.state.ACTIVE)
                    .options(*cls._defercols())
                    .limit(20)
                    # .union(base_users)  # FIXME: Broken in SQLAlchemy 1.4.17
                    .all()
                )
            else:
                users = []
        else:
            # No '@' in the query, so do a regular autocomplete
            try:
                users = base_users.all()
            except sa.exc.ProgrammingError:
                # This can happen because the tsquery from prefix turned out to be ':*'
                users = []
        return users

    @classmethod
    def validate_name_candidate(cls, name: str) -> Optional[str]:
        """
        Validate an account name candidate.

        Returns one of several error codes, or `None` if all is okay:

        * ``blank``: No name supplied
        * ``reserved``: Name is reserved
        * ``invalid``: Invalid characters in name
        * ``long``: Name is longer than allowed size
        * ``user``: Name is assigned to a user
        * ``org``: Name is assigned to an organization
        """
        if not name:
            return 'blank'
        if name.lower() in cls.reserved_names:
            return 'reserved'
        if not valid_account_name(name):
            return 'invalid'
        if len(name) > cls.__name_length__:
            return 'long'
        existing = (
            cls.query.filter(sa.func.lower(cls.name) == sa.func.lower(name))
            .options(sa.orm.load_only(cls.id, cls.uuid, cls.type_))
            .one_or_none()
        )
        if existing is not None:
            if isinstance(existing, Placeholder):
                return 'reserved'
            if isinstance(existing, User):
                return 'user'
            if isinstance(existing, Organization):
                return 'org'
        return None

    def validate_new_name(self, name: str) -> Optional[str]:
        """Validate a new name for this account, returning an error code or None."""
        if self.name and name.lower() == self.name.lower():
            return None
        return self.validate_name_candidate(name)

    @classmethod
    def is_available_name(cls, name: str) -> bool:
        """Test if the candidate name is available for use as an Account name."""
        return cls.validate_name_candidate(name) is None

    @sa.orm.validates('name')
    def _validate_name(self, key: str, value: Optional[str]):
        """Validate the value of Account.name."""
        if value and (
            value.lower() in self.reserved_names or not valid_account_name(value)
        ):
            raise ValueError("Invalid account name: " + value)
        if not value and self.name and not self.state.GONE:
            raise ValueError("Account name cannot be unset")
        # We don't check for existence in the db since this validator only
        # checks for valid syntax. To confirm the name is actually available,
        # the caller must call :meth:`is_available_name` or attempt to commit
        # to the db and catch IntegrityError.
        return value

    @sa.orm.validates('logo_url', 'banner_image_url')
    def _validate_nullable(self, key: str, value: Optional[str]):
        """Convert blank values into None."""
        return value if value else None

    @classmethod
    def active_count(cls) -> int:
        """Count of all active accounts."""
        return cls.query.filter(cls.state.ACTIVE).count()

    #: FIXME: Temporary values for Baseframe compatibility
    def organization_links(self) -> List:
        """Return list of organizations affiliated with this user (deprecated)."""
        return []

    # Make :attr:`type_` available under the name `type`, but declare this at the very
    # end of the class to avoid conflicts with the Python `type` global that is
    # used for type-hinting
    type: Mapped[str] = sa.orm.synonym('type_')  # noqa: A003


auto_init_default(Account._state)  # pylint: disable=protected-access
auto_init_default(Account._profile_state)  # pylint: disable=protected-access
add_search_trigger(Account, 'search_vector')
add_search_trigger(Account, 'name_vector')


class AccountOldId(UuidMixin, BaseMixin, Model):
    """Record of an older UUID for an account, after account merger."""

    __tablename__ = 'account_oldid'
    __allow_unmapped__ = True
    __uuid_primary_key__ = True

    #: Old account, if still present
    old_account: Mapped[Account] = relationship(
        Account,
        primaryjoin='foreign(AccountOldId.id) == remote(Account.uuid)',
        backref=backref('oldid', uselist=False),
    )
    #: User id of new user
    account_id: Mapped[int] = sa.orm.mapped_column(
        sa.ForeignKey('account.id'), nullable=False
    )
    #: New account
    account: Mapped[Account] = relationship(
        Account,
        foreign_keys=[account_id],
        backref=backref('oldids', cascade='all'),
    )

    def __repr__(self) -> str:
        """Represent :class:`AccountOldId` as a string."""
        return f'<AccountOldId {self.buid} of {self.account!r}>'

    @classmethod
    def get(cls, uuid: UUID) -> Optional[AccountOldId]:
        """Get an old user record given a UUID."""
        return cls.query.filter_by(id=uuid).one_or_none()


class User(Account):
    """User account."""

    __mapper_args__ = {'polymorphic_identity': 'U'}
    is_user_profile = True

    def __init__(self, **kwargs) -> None:
        super().__init__(**kwargs)
        if self.joined_at is None:
            self.joined_at = sa.func.utcnow()


# XXX: Deprecated, still here for Baseframe compatibility
Account.userid = Account.uuid_b64


class DuckTypeAccount(RoleMixin):
    """User singleton constructor. Ducktypes a regular user object."""

    id: None = None  # noqa: A003
    created_at: None = None
    updated_at: None = None
    uuid: None = None
    userid: None = None
    buid: None = None
    uuid_b58: None = None
    username: None = None
    name: None = None
    profile_url: None = None
    email: None = None
    phone: None = None

    is_user_profile = True
    is_organization_profile = False
    is_placeholder_profile = False

    # Copy registries from Account model
    views = Account.views
    features = Account.features
    forms = Account.forms

    __roles__ = {
        'all': {
            'read': {
                'id',
                'uuid',
                'username',
                'fullname',
                'pickername',
                'profile_url',
            },
            'call': {'views', 'forms', 'features', 'url_for'},
        }
    }

    __datasets__ = {
        'related': {
            'username',
            'fullname',
            'pickername',
            'profile_url',
        }
    }

    #: Make obj.user/obj.posted_by from a referring object falsy
    def __bool__(self) -> bool:
        """Represent boolean state."""
        return False

    def __init__(self, representation: str) -> None:
        self.fullname = self.title = self.pickername = representation

    def __str__(self) -> str:
        return self.pickername

    def __format__(self, format_spec: str) -> str:
        if not format_spec:
            return self.pickername
        return self.pickername.__format__(format_spec)

    def url_for(self, *args, **kwargs) -> Literal['']:
        """Return blank URL for anything to do with this user."""
        return ''


deleted_account = DuckTypeAccount(__("[deleted]"))
removed_account = DuckTypeAccount(__("[removed]"))
unknown_account = DuckTypeAccount(__("[unknown]"))


# --- Organizations and teams -------------------------------------------------

team_membership = sa.Table(
    'team_membership',
    Model.metadata,
    sa.Column(
        'account_id',
        sa.Integer,
        sa.ForeignKey('account.id'),
        nullable=False,
        primary_key=True,
    ),
    sa.Column(
        'team_id',
        sa.Integer,
        sa.ForeignKey('team.id'),
        nullable=False,
        primary_key=True,
    ),
    sa.Column(
        'created_at',
        sa.TIMESTAMP(timezone=True),
        nullable=False,
        default=sa.func.utcnow(),
    ),
)


class Organization(Account):
    """An organization of one or more users with distinct roles."""

    __mapper_args__ = {'polymorphic_identity': 'O'}
    is_organization_profile = True

    def __init__(self, owner: User, **kwargs) -> None:
        super().__init__(**kwargs)
        if self.joined_at is None:
            self.joined_at = sa.func.utcnow()
        db.session.add(
            AccountMembership(
                account=self, member=owner, granted_by=owner, is_owner=True
            )
        )

    def people(self) -> Query[Account]:
        """Return a list of users from across the public teams they are in."""
        return (
            Account.query.join(team_membership)
            .join(Team)
            .filter(Team.account == self, Team.is_public.is_(True))
            .options(sa.orm.joinedload(Account.member_teams))
            .order_by(sa.func.lower(Account.title))
        )


class Placeholder(Account):
    """A placeholder account."""

    __mapper_args__ = {'polymorphic_identity': 'P'}
    is_placeholder_profile = True


class Team(UuidMixin, BaseMixin, Model):
    """A team of users within an organization."""

    __tablename__ = 'team'
    __allow_unmapped__ = True
    __title_length__ = 250
    #: Displayed name
    title: Mapped[str] = sa.orm.mapped_column(
        sa.Unicode(__title_length__), nullable=False
    )
    #: Organization
    account_id: Mapped[int] = sa.orm.mapped_column(
        sa.ForeignKey('account.id'), nullable=False, index=True
    )
    account = with_roles(
        relationship(
            Account,
            foreign_keys=[account_id],
            backref=backref('teams', order_by=sa.func.lower(title), cascade='all'),
        ),
        grants_via={None: {'owner': 'owner', 'admin': 'admin'}},
    )
    users: DynamicMapped[Account] = with_roles(
        relationship(
            Account, secondary=team_membership, lazy='dynamic', backref='member_teams'
        ),
        grants={'member'},
    )

    is_public: Mapped[bool] = sa.orm.mapped_column(
        sa.Boolean, nullable=False, default=False
    )

    def __repr__(self) -> str:
        """Represent :class:`Team` as a string."""
        return f'<Team {self.title} of {self.account!r}>'

    @property
    def pickername(self) -> str:
        """Return team's title in a format suitable for identification."""
        return self.title

    @classmethod
    def migrate_account(
        cls, old_account: Account, new_account: Account
    ) -> OptionalMigratedTables:
        """Migrate one account's data to another when merging accounts."""
        for team in list(old_account.teams):
            team.account = new_account
        for team in list(old_account.member_teams):
            if team not in new_account.member_teams:
                # FIXME: This creates new memberships, updating `created_at`.
                # Unfortunately, we can't work with model instances as in the other
                # `migrate_account` methods as team_membership is an unmapped table.
                new_account.member_teams.append(team)
            old_account.member_teams.remove(team)
        return [cls.__table__.name, team_membership.name]

    @classmethod
    def get(cls, buid: str, with_parent: bool = False) -> Optional[Team]:
        """
        Return a Team with matching buid.

        :param str buid: Buid of the team
        """
        if with_parent:
            query = cls.query.options(sa.orm.joinedload(cls.account))
        else:
            query = cls.query
        return query.filter_by(buid=buid).one_or_none()


# --- Account email/phone and misc


class AccountEmail(EmailAddressMixin, BaseMixin, Model):
    """An email address linked to an account."""

    __tablename__ = 'account_email'
    __allow_unmapped__ = True
    __email_optional__ = False
    __email_unique__ = True
    __email_is_exclusive__ = True
    __email_for__ = 'account'

    # Tell mypy that these are not optional
    email_address: Mapped[EmailAddress]  # type: ignore[assignment]

    account_id: Mapped[int] = sa.orm.mapped_column(
        sa.ForeignKey('account.id'), nullable=False
    )
    account: Mapped[Account] = relationship(
        Account, backref=backref('emails', cascade='all')
    )
    user: Mapped[Account] = sa.orm.synonym('account')

    private: Mapped[bool] = sa.orm.mapped_column(
        sa.Boolean, nullable=False, default=False
    )

    __datasets__ = {
        'primary': {'member', 'email', 'private', 'type'},
        'without_parent': {'email', 'private', 'type'},
        'related': {'email', 'private', 'type'},
    }

    def __init__(self, account: Account, **kwargs) -> None:
        email = kwargs.pop('email', None)
        if email:
            kwargs['email_address'] = EmailAddress.add_for(account, email)
        super().__init__(account=account, **kwargs)

    def __repr__(self) -> str:
        """Represent this class as a string."""
        return f'<AccountEmail {self.email} of {self.account!r}>'

    def __str__(self) -> str:  # pylint: disable=invalid-str-returned
        """Email address as a string."""
        return self.email or ''

    @property
    def primary(self) -> bool:
        """Check whether this email address is the user's primary."""
        return self.account.primary_email == self

    @primary.setter
    def primary(self, value: bool) -> None:
        """Set or unset this email address as primary."""
        if value:
            self.account.primary_email = self
        else:
            if self.account.primary_email == self:
                self.account.primary_email = None

    @overload
    @classmethod
    def get(
        cls,
        email: str,
    ) -> Optional[AccountEmail]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        *,
        blake2b160: bytes,
    ) -> Optional[AccountEmail]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        *,
        email_hash: str,
    ) -> Optional[AccountEmail]:
        ...

    @classmethod
    def get(
        cls,
        email: Optional[str] = None,
        *,
        blake2b160: Optional[bytes] = None,
        email_hash: Optional[str] = None,
    ) -> Optional[AccountEmail]:
        """
        Return an AccountEmail with matching email or blake2b160 hash.

        :param email: Email address to look up
        :param blake2b160: 160-bit blake2b of email address to look up
        :param email_hash: blake2b hash rendered in Base58
        """
        email_filter = EmailAddress.get_filter(
            email=email, blake2b160=blake2b160, email_hash=email_hash
        )
        if email_filter is None:
            return None
        return cls.query.join(EmailAddress).filter(email_filter).one_or_none()

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        email: str,
    ) -> Optional[AccountEmail]:
        ...

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        blake2b160: bytes,
    ) -> Optional[AccountEmail]:
        ...

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        email_hash: str,
    ) -> Optional[AccountEmail]:
        ...

    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        email: Optional[str] = None,
        blake2b160: Optional[bytes] = None,
        email_hash: Optional[str] = None,
    ) -> Optional[AccountEmail]:
        """
        Return instance with matching email or hash if it belongs to the given user.

        :param user: Account to look up for
        :param email: Email address to look up
        :param blake2b160: 160-bit blake2b of email address
        :param email_hash: blake2b hash rendered in Base58
        """
        email_filter = EmailAddress.get_filter(
            email=email, blake2b160=blake2b160, email_hash=email_hash
        )
        if email_filter is None:
            return None
        return (
            cls.query.join(EmailAddress)
            .filter(
                cls.account == account,
                email_filter,
            )
            .one_or_none()
        )

    @classmethod
    def migrate_account(
        cls, old_account: Account, new_account: Account
    ) -> OptionalMigratedTables:
        """Migrate one account's data to another when merging accounts."""
        primary_email = old_account.primary_email
        for accountemail in list(old_account.emails):
            accountemail.account = new_account
        if new_account.primary_email is None:
            new_account.primary_email = primary_email
        old_account.primary_email = None
        return [cls.__table__.name, user_email_primary_table.name]


class AccountEmailClaim(EmailAddressMixin, BaseMixin, Model):
    """Claimed but unverified email address for a user."""

    __tablename__ = 'account_email_claim'
    __allow_unmapped__ = True
    __email_optional__ = False
    __email_unique__ = False
    __email_for__ = 'account'
    __email_is_exclusive__ = False

    # Tell mypy that these are not optional
    email_address: Mapped[EmailAddress]  # type: ignore[assignment]
    email: str

    account_id: Mapped[int] = sa.orm.mapped_column(
        sa.ForeignKey('account.id'), nullable=False
    )
    account: Mapped[Account] = relationship(
        Account, backref=backref('emailclaims', cascade='all')
    )
    user: Mapped[Account] = sa.orm.synonym('account')
    verification_code: Mapped[str] = sa.orm.mapped_column(
        sa.String(44), nullable=False, default=newsecret
    )

    private: Mapped[bool] = sa.orm.mapped_column(
        sa.Boolean, nullable=False, default=False
    )

    __table_args__ = (sa.UniqueConstraint('account_id', 'email_address_id'),)

    __datasets__ = {
        'primary': {'member', 'email', 'private', 'type'},
        'without_parent': {'email', 'private', 'type'},
        'related': {'email', 'private', 'type'},
    }

    def __init__(self, account: Account, **kwargs) -> None:
        email = kwargs.pop('email', None)
        if email:
            kwargs['email_address'] = EmailAddress.add_for(account, email)
        super().__init__(account=account, **kwargs)
        self.blake2b = hashlib.blake2b(
            self.email.lower().encode(), digest_size=16
        ).digest()

    def __repr__(self) -> str:
        """Represent this class as a string."""
        return f'<AccountEmailClaim {self.email} of {self.account!r}>'

    def __str__(self) -> str:
        """Return email as a string."""
        return str(self.email)

    @classmethod
    def migrate_account(cls, old_account: Account, new_account: Account) -> None:
        """Migrate one account's data to another when merging accounts."""
        emails = {claim.email for claim in new_account.emailclaims}
        for claim in list(old_account.emailclaims):
            if claim.email not in emails:
                claim.account = new_account
            else:
                # New user also made the same claim. Delete old user's claim
                db.session.delete(claim)

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        email: str,
    ) -> Optional[AccountEmailClaim]:
        ...

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        blake2b160: bytes,
    ) -> Optional[AccountEmailClaim]:
        ...

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        email_hash: str,
    ) -> Optional[AccountEmailClaim]:
        ...

    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        email: Optional[str] = None,
        blake2b160: Optional[bytes] = None,
        email_hash: Optional[str] = None,
    ) -> Optional[AccountEmailClaim]:
        """
        Return an AccountEmailClaim with matching email address for the given user.

        :param account: Account that claimed this email address
        :param email: Email address to look up
        :param blake2b160: 160-bit blake2b of email address to look up
        :param email_hash: Base58 rendering of 160-bit blake2b hash
        """
        email_filter = EmailAddress.get_filter(
            email=email, blake2b160=blake2b160, email_hash=email_hash
        )
        if email_filter is None:
            return None
        return (
            cls.query.join(EmailAddress)
            .filter(
                cls.account == account,
                email_filter,
            )
            .one_or_none()
        )

    @overload
    @classmethod
    def get_by(
        cls,
        verification_code: str,
        *,
        email: str,
    ) -> Optional[AccountEmailClaim]:
        ...

    @overload
    @classmethod
    def get_by(
        cls,
        verification_code: str,
        *,
        blake2b160: bytes,
    ) -> Optional[AccountEmailClaim]:
        ...

    @overload
    @classmethod
    def get_by(
        cls,
        verification_code: str,
        *,
        email_hash: str,
    ) -> Optional[AccountEmailClaim]:
        ...

    @classmethod
    def get_by(
        cls,
        verification_code: str,
        *,
        email: Optional[str] = None,
        blake2b160: Optional[bytes] = None,
        email_hash: Optional[str] = None,
    ) -> Optional[AccountEmailClaim]:
        """Return an instance given verification code and email or hash."""
        email_filter = EmailAddress.get_filter(
            email=email, blake2b160=blake2b160, email_hash=email_hash
        )
        if email_filter is None:
            return None
        return (
            cls.query.join(EmailAddress)
            .filter(
                cls.verification_code == verification_code,
                email_filter,
            )
            .one_or_none()
        )

    @classmethod
    def all(cls, email: str) -> Query[AccountEmailClaim]:  # noqa: A003
        """
        Return all instances with the matching email address.

        :param str email: Email address to lookup
        """
        email_filter = EmailAddress.get_filter(email=email)
        if email_filter is None:
            raise ValueError(email)
        return cls.query.join(EmailAddress).filter(email_filter)


auto_init_default(AccountEmailClaim.verification_code)


class AccountPhone(PhoneNumberMixin, BaseMixin, Model):
    """A phone number linked to an account."""

    __tablename__ = 'account_phone'
    __allow_unmapped__ = True
    __phone_optional__ = False
    __phone_unique__ = True
    __phone_is_exclusive__ = True
    __phone_for__ = 'account'

    account_id: Mapped[int] = sa.orm.mapped_column(
        sa.ForeignKey('account.id'), nullable=False
    )
    account: Mapped[Account] = relationship(
        Account, backref=backref('phones', cascade='all')
    )
    user: Mapped[Account] = sa.orm.synonym('account')

    private: Mapped[bool] = sa.orm.mapped_column(
        sa.Boolean, nullable=False, default=False
    )

    __datasets__ = {
        'primary': {'member', 'phone', 'private', 'type'},
        'without_parent': {'phone', 'private', 'type'},
        'related': {'phone', 'private', 'type'},
    }

    def __init__(self, account, **kwargs) -> None:
        phone = kwargs.pop('phone', None)
        if phone:
            kwargs['phone_number'] = PhoneNumber.add_for(account, phone)
        super().__init__(account=account, **kwargs)

    def __repr__(self) -> str:
        """Represent this class as a string."""
        return f'AccountPhone(phone={self.phone!r}, account={self.account!r})'

    def __str__(self) -> str:
        """Return phone number as a string."""
        return self.phone or ''

    @cached_property
    def parsed(self) -> phonenumbers.PhoneNumber:
        """Return parsed phone number using libphonenumbers."""
        return self.phone_number.parsed

    @cached_property
    def formatted(self) -> str:
        """Return a phone number formatted for user display."""
        return self.phone_number.formatted

    @property
    def number(self) -> Optional[str]:
        return self.phone_number.number

    @property
    def primary(self) -> bool:
        """Check if this is the user's primary phone number."""
        return self.account.primary_phone == self

    @primary.setter
    def primary(self, value: bool) -> None:
        if value:
            self.account.primary_phone = self
        else:
            if self.account.primary_phone == self:
                self.account.primary_phone = None

    @overload
    @classmethod
    def get(
        cls,
        phone: str,
    ) -> Optional[AccountPhone]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        *,
        blake2b160: bytes,
    ) -> Optional[AccountPhone]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        *,
        phone_hash: str,
    ) -> Optional[AccountPhone]:
        ...

    @classmethod
    def get(
        cls,
        phone: Optional[str] = None,
        *,
        blake2b160: Optional[bytes] = None,
        phone_hash: Optional[str] = None,
    ) -> Optional[AccountPhone]:
        """
        Return an AccountPhone with matching phone number.

        :param phone: Phone number to lookup
        :param blake2b160: 160-bit blake2b of phone number to look up
        :param phone_hash: blake2b hash rendered in Base58
        """
        return (
            cls.query.join(PhoneNumber)
            .filter(
                PhoneNumber.get_filter(
                    phone=phone, blake2b160=blake2b160, phone_hash=phone_hash
                )
            )
            .one_or_none()
        )

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        phone: str,
    ) -> Optional[AccountPhone]:
        ...

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        blake2b160: bytes,
    ) -> Optional[AccountPhone]:
        ...

    @overload
    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        phone_hash: str,
    ) -> Optional[AccountPhone]:
        ...

    @classmethod
    def get_for(
        cls,
        account: Account,
        *,
        phone: Optional[str] = None,
        blake2b160: Optional[bytes] = None,
        phone_hash: Optional[str] = None,
    ) -> Optional[AccountPhone]:
        """
        Return an instance with matching phone or hash if it belongs to the given user.

        :param account: Account to look up for
        :param phone: Email address to look up
        :param blake2b160: 160-bit blake2b of phone number
        :param phone_hash: blake2b hash rendered in Base58
        """
        return (
            cls.query.join(PhoneNumber)
            .filter(
                cls.account == account,
                PhoneNumber.get_filter(
                    phone=phone, blake2b160=blake2b160, phone_hash=phone_hash
                ),
            )
            .one_or_none()
        )

    @classmethod
    def migrate_account(
        cls, old_account: Account, new_account: Account
    ) -> OptionalMigratedTables:
        """Migrate one account's data to another when merging accounts."""
        primary_phone = old_account.primary_phone
        for accountphone in list(old_account.phones):
            accountphone.account = new_account
        if new_account.primary_phone is None:
            new_account.primary_phone = primary_phone
        old_account.primary_phone = None
        return [cls.__table__.name, user_phone_primary_table.name]


class AccountExternalId(BaseMixin, Model):
    """An external connected account for a user."""

    __tablename__ = 'account_externalid'
    __allow_unmapped__ = True
    __at_username_services__: List[str] = []
    #: Foreign key to user table
    account_id: Mapped[int] = sa.orm.mapped_column(
        sa.ForeignKey('account.id'), nullable=False
    )
    #: User that this connected account belongs to
    account: Mapped[Account] = relationship(
        Account, backref=backref('externalids', cascade='all')
    )
    user: Mapped[Account] = sa.orm.synonym('account')
    #: Identity of the external service (in app's login provider registry)
    # FIXME: change to sa.Unicode
    service: Mapped[str] = sa.orm.mapped_column(sa.UnicodeText, nullable=False)
    #: Unique user id as per external service, used for identifying related accounts
    # FIXME: change to sa.Unicode
    userid: Mapped[str] = sa.orm.mapped_column(
        sa.UnicodeText, nullable=False
    )  # Unique id (or obsolete OpenID)
    #: Optional public-facing username on the external service
    # FIXME: change to sa.Unicode
    username: Mapped[Optional[str]] = sa.orm.mapped_column(
        sa.UnicodeText, nullable=True
    )  # LinkedIn once used full URLs
    #: OAuth or OAuth2 access token
    # FIXME: change to sa.Unicode
    oauth_token: Mapped[Optional[str]] = sa.orm.mapped_column(
        sa.UnicodeText, nullable=True
    )
    #: Optional token secret (not used in OAuth2, used by Twitter with OAuth1a)
    # FIXME: change to sa.Unicode
    oauth_token_secret: Mapped[Optional[str]] = sa.orm.mapped_column(
        sa.UnicodeText, nullable=True
    )
    #: OAuth token type (typically 'bearer')
    # FIXME: change to sa.Unicode
    oauth_token_type: Mapped[Optional[str]] = sa.orm.mapped_column(
        sa.UnicodeText, nullable=True
    )
    #: OAuth2 refresh token
    # FIXME: change to sa.Unicode
    oauth_refresh_token: Mapped[Optional[str]] = sa.orm.mapped_column(
        sa.UnicodeText, nullable=True
    )
    #: OAuth2 token expiry in seconds, as sent by service provider
    oauth_expires_in: Mapped[Optional[int]] = sa.orm.mapped_column(
        sa.Integer, nullable=True
    )
    #: OAuth2 token expiry timestamp, estimate from created_at + oauth_expires_in
    oauth_expires_at: Mapped[Optional[datetime]] = sa.orm.mapped_column(
        sa.TIMESTAMP(timezone=True), nullable=True, index=True
    )

    #: Timestamp of when this connected account was last (re-)authorised by the user
    last_used_at: Mapped[datetime] = sa.orm.mapped_column(
        sa.TIMESTAMP(timezone=True), default=sa.func.utcnow(), nullable=False
    )

    __table_args__ = (
        sa.UniqueConstraint('service', 'userid'),
        sa.Index(
            'ix_account_externalid_username_lower',
            sa.func.lower(username).label('username_lower'),
            postgresql_ops={'username_lower': 'varchar_pattern_ops'},
        ),
    )

    def __repr__(self) -> str:
        """Represent :class:`UserExternalId` as a string."""
        return f'<UserExternalId {self.service}:{self.username} of {self.account!r}>'

    @overload
    @classmethod
    def get(
        cls,
        service: str,
        *,
        userid: str,
    ) -> Optional[AccountExternalId]:
        ...

    @overload
    @classmethod
    def get(
        cls,
        service: str,
        *,
        username: str,
    ) -> Optional[AccountExternalId]:
        ...

    @classmethod
    def get(
        cls,
        service: str,
        *,
        userid: Optional[str] = None,
        username: Optional[str] = None,
    ) -> Optional[AccountExternalId]:
        """
        Return a UserExternalId with the given service and userid or username.

        :param str service: Service to lookup
        :param str userid: Userid to lookup
        :param str username: Username to lookup (may be non-unique)

        Usernames are not guaranteed to be unique within a service. An example is with
        Google, where the userid is a directed OpenID URL, unique but subject to change
        if the Lastuser site URL changes. The username is the email address, which will
        be the same despite different userids.
        """
        param, value = require_one_of(True, userid=userid, username=username)
        return cls.query.filter_by(**{param: value, 'service': service}).one_or_none()


user_email_primary_table = add_primary_relationship(
    Account, 'primary_email', AccountEmail, 'account', 'account_id'
)
user_phone_primary_table = add_primary_relationship(
    Account, 'primary_phone', AccountPhone, 'account', 'account_id'
)

#: Anchor type
Anchor = Union[AccountEmail, AccountEmailClaim, AccountPhone, EmailAddress, PhoneNumber]

# Tail imports
# pylint: disable=wrong-import-position
from .membership_mixin import ImmutableMembershipMixin  # isort: skip
from .account_membership import AccountMembership  # isort:skip
