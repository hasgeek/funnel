{% extends "layout.html.jinja2" %}
{% set title_suffix = project.title %}
{% from "baseframe/forms.html.jinja2" import renderfield, widgetscripts %}
{% from "comments.html.jinja2" import commenttree, commentformtemplate %}
{%- from "macros.html.jinja2" import project_header %}
{% block title %}{% trans %}Comments{% endtrans %}{% endblock %}
{% block description %}{{ project.title }}{% if project.tagline %} &ndash; {{ project.taglines }}{% endif %}{% endblock %}

{%- block pageheaders %}
  {% assets "css_codemirrormarkdown" -%}
    <link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />
  {%- endassets -%}
{% endblock %}

{% block bodytag %}
  {%- if not config['LEGACY'] -%}
    <body class="mui--bg-primary hg-app no-sticky-header">
  {%- else %}
    <body class="mui--bg-primary no-sticky-header">
  {%- endif %}
{% endblock %}

{% block contenthead %}{% endblock %}

{% block baseheadline %}
  <div class="mui--hidden-md mui--hidden-lg mui--hidden-xl">
    <div class="mobile-nav mui--z1">
      <a href="{{ project.url_for() }}" aria-label="{% trans %}Back to the project{% endtrans %}" class="mui--text-dark mobile-nav__icon" data-action="Back to the {{ project.title }}(videos page)">{{ faicon(icon='arrow-left', icon_size='title') }}</a><span class="mui--text-dark mobile-nav__headline">{% trans %}Comments{% endtrans %}</span>
    </div>
  </div>
  {{ project_header(project, project_save_form, csrf_form,
    class='mui--hidden-xs mui--hidden-sm',
    current_page='comments') }}
{% endblock %}

{% block basecontent %}
  <div class="mui-container">
    <div class="page-content page-content--mob-nav">
      <div class="grid project-section" id="comments">
        <div class="grid__col-xs-12">
          <h2 class="mui--text-headline mui--text-left project-section__headline">{% trans %}Comments{% endtrans %}</h2>
        </div>
        <div class="grid__col-xs-12">
          {% raw %}
            <div id="comments-wrapper">
              <ul class="mui-list--unstyled" v-for="comment in comments">
                <comment :comment="comment" :isuserparticipant="isuserparticipant"></comment>
              </ul>
              <component :is="Form"></component>
              <button class="mui-btn mui-btn--raised mui-btn--primary full-width-btn" @click="fetchForm($event, newCommentUrl)" aria-label="Add new member" data-cy-btn="add-member">Post comment</button>
            </div>
          {% endraw %}
          {% raw %}
            <script type="text/x-template" id="comment-template">
              <li class="comment">
                <div id="c{{ comment.uuid_b58 }}">
                  <div class="comment--content">
                    <div class="comment--header">
                      <button class="mui-btn mui-btn--nostyle" aria-label="Hide comment" aria-expanded="true" v-if="!hide" @click="collapse(true)">
                        <svg class="fa5-icon fa5-icon--subhead test fa5--align-baseline" aria-hidden="true" role="img"><use v-bind:xlink:href="svgIconUrl + '#caret-circle-up'"></use></svg>
                      </button>
                      <button class="mui-btn mui-btn--nostyle" aria-expanded="false" aria-label="Collapse comment" v-else @click="collapse(false)">
                        <svg class="fa5-icon fa5-icon--subhead test fa5--align-baseline" aria-hidden="true" role="img"><use v-bind:xlink:href="svgIconUrl + '#caret-circle-down'"></use></svg>
                      </button>
                      <div class="comment--header__details">
                        <span class="commenter" v-if="comment.state && comment.state.DELETED">[deleted]</span>
                        <span class="commenter" v-if="comment.state && comment.state.SPAM">[removed]</span>
                        <span class="commenter" v-if="!comment.state">{{ comment.user.pickername }}</span>
                        <span class="badge" v-for="badge in comment.badges">{{ badge }}</span>
                        <span class="mui--text-caption mui--text-accent">{{ comment.created_at }}</span>
                        <span class="mui--text-caption mui--text-accent" v-if="comment.edited_at">(edited {{ comment.edited_at }})</span>
                      </div>
                    </div>
                    <transition name="slide">
                      <div class="comment--body" v-if="!hide">
                        <div v-if="!comment.state">{{ comment.message.text }}</div>
                        <div data-id="{{ comment.uuid_b58 }}">
                          <a class="mui--text-menu mui--text-accent" data-cy="reply" v-if="isuserparticipant"  @click="fetchForm($event, comment.urls.reply, comment)">[Reply]</a>
                          <a class="mui--text-menu mui--text-accent" data-cy="report-spam" v-if="isuserparticipant" >[Report Spam]</a>
                          <a class="mui--text-menu mui--text-accent" data-cy="edit" v-if="comment.current_roles && comment.current_roles.author" @click="fetchForm($event, comment.urls.edit, comment)">[Edit]</a>
                          <a class="mui--text-menu mui--text-accent" data-cy="delete" v-if="comment.current_roles && comment.current_roles.author"  @click="fetchForm($event, comment.urls.delete, comment)">[Delete]</a>
                          <a class="mui--text-menu mui--text-accent comment--permalink">[Link]</a>
                          <a class="mui--text-menu mui--text-accent comment--parent" v-if="comment.parent">[Parent]</a>
                        </div>
                        <ul class="mui-list--aligned mui-list--unstyled comment--children" v-for="child_comment in comment.children_comments">
                          <comment :comment="child_comment" :isuserparticipant="isuserparticipant"></comment>
                        </ul>
                      </div>
                    </transition>
                  </div>
                </div>
              </li>
            </script>
          {% endraw %}
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block pagescripts %}
  {% assets "js_codemirrormarkdown" -%}
    <script type="text/javascript" src="{{ ASSET_URL }}"></script>
  {%- endassets -%}
{% endblock %}

{% block footerscripts %}
  <script src="{{ url_for('static', filename=asset_path('project_header')) }}" type="text/javascript"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.min.js" type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue-script2@2.1.0/dist/vue-script2.min.js" type="text/javascript"></script>
  <script type="text/javascript">
    $(function() {
      var saveProjectConfig = {
        formId: 'save-form',
        postUrl: {{ project.url_for('save')|tojson }}
      }

      window.HasGeek.ProjectHeaderInit(saveProjectConfig);

      var commentsConfig = {
        newCommentUrl: "{{ project.commentset.url_for('new_comment') }}",
        comments: {{ comments|tojson }},
        divElem: "#comments-wrapper",
        commentTemplate: '#comment-template',
        isuserloggedin: {% if current_auth.user -%}true{% else %}false{% endif %},
        isuserparticipant: {% if current_auth.user and project.features.comment_new() -%}true{% else %}false{% endif %}
      };

      Utils = {
        getElementId(htmlString) {
          return htmlString.match(/id="(.*?)"/)[1];
        },
        getActionUrl(formId) {
          return $(`#${formId}`).attr('action');
        },
        updateFormNonce(response) {
          if (response.form_nonce) {
            $('input[name="form_nonce"]').val(response.form_nonce);
          }
        },
        getResponseError(response) {
          let errorMsg = '';

          if (response.readyState === 4) {
            if (response.status === 500) {
              errorMsg =
                'An internal server error occurred. Our support team has been notified and will investigate.';
            } else {
              errorMsg = JSON.parse(response.responseText).error_description;
            }
          } else {
            errorMsg = 'Unable to connect. Please reload and try again.';
          }
          return errorMsg;
        },
        handleAjaxError(errorResponse) {
          Utils.updateFormNonce(errorResponse.responseJSON);
          let errorMsg = Utils.getResponseError(errorResponse);
          window.toastr.error(errorMsg);
          return errorMsg;
        },
        formErrorHandler(formId, errorResponse) {
          $(`#${formId}`)
            .find('button[type="submit"]')
            .prop('disabled', false);
          $(`#${formId}`)
            .find('.loading')
            .addClass('mui--hide');
          return Utils.handleAjaxError(errorResponse);
        }
      }

      const Comments = {
        init({
          newCommentUrl,
          comments = '',
          divElem,
          commentTemplate,
          isUserProfileAdmin,
          isuserloggedin,
          isuserparticipant
        }) {

          Vue.config.debug = true
          Vue.use(VueScript2)

          const commentUI = Vue.component('comment', {
            template: commentTemplate,
            props: ['comment',  'isuserparticipant'],
            data() {
              return {
                svgIconUrl: window.HasGeek.config.svgIconUrl,
                hide: false,
              };
            },
            methods: {
              getInitials: window.Baseframe.Utils.getInitials,
              collapse(action) {
                this.hide = action;
              },
              fetchForm(event, url, comment = '') {
                this.$parent.fetchForm(event, url, comment)
              }
            }
          });

          /* eslint-disable no-new */
          new Vue({
            el: divElem,
            components: {
              commentUI,
            },
            data() {
              return {
                newCommentUrl,
                comments: comments.length > 0 ? comments : '',
                isuserloggedin,
                isuserparticipant,
                commentForm: '',
                activeComment: '',
                errorMsg: '',
                view: 'name',
                search: '',
                showInfo: false,
                isMobile: false,
                ready: false,
                svgIconUrl: window.HasGeek.config.svgIconUrl,
              };
            },
            methods: {
              fetchForm(event, url, comment = '') {
                console.log('fetchForm', url, comment)
                event.preventDefault();
                if (this.isuserparticipant) {
                  this.activeComment = comment;
                  const app = this;
                  $.ajax({
                    type: 'GET',
                    url,
                    timeout: window.HasGeek.config.ajaxTimeout,
                    dataType: 'json',
                    success(data) {
                      console.log('data', data)
                      const vueFormHtml = data.form;
                      app.commentForm = vueFormHtml.replace(/\bscript\b/g, 'script2');
                    },
                  });
                }
              },
              activateForm() {
                const formId = Utils.getElementId(this.commentForm);
                const url = Utils.getActionUrl(formId);
                const onSuccess = responseData => {
                  this.closeForm();
                  if (responseData.comments) {
                    this.updateCommentsList(responseData.comments);
                    this.onChange();
                    window.toastr.success(responseData.message);
                  }
                };
                const onError = response => {
                  this.errorMsg = Utils.formErrorHandler(formId, response);
                };
                window.Baseframe.Forms.handleFormSubmit(
                  formId,
                  url,
                  onSuccess,
                  onError,
                  {}
                );
              },
              updateCommentsList(commentsList) {
                this.comments = commentsList.length > 0 ? commentsList : '';
              },
              closeForm(event = '') {
                if (event) event.preventDefault();
                $.modal.close();
                this.errorMsg = '';
              },
            },
            computed: {
              Form() {
                const template = this.commentForm ? this.commentForm : '<div></div>';
                const isFormTemplate = this.commentForm ? true : '';
                return {
                  template,
                  mounted() {
                    if (isFormTemplate) {
                      this.$parent.activateForm();
                    }
                  },
                };
              },
              deleteURL() {
                return this.activeComment.urls.delete;
              },
            },
            mounted() {
            },
            created() {
              console.log('vue is created', comments);
            },
          });
        }
      }

    Comments.init(commentsConfig);

    });
  </script>
{% endblock %}
