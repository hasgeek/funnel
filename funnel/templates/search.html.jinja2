{% extends "layout.html.jinja2" %}
{% from "baseframe/forms.html.jinja2" import ajaxform %}
{% block title %}Search{% endblock %}
{% block description %}Search{% endblock %}

{% block contentwrapper %}
  <div class="grid details-section">
    <div class="grid__col-12">
      <div id="search-wrapper">
        {% raw %}
        <script id='search-template' type='text/ractive'>
          <div class="tabs">
            {{#each tabs}}
              <p class="mui--text-subhead tabs__item mui--text-uppercase {{#if activeTab == type}}tabs__item--active{{/if}}" on-click="updateTabContent(event, type)">{{ label }}</p>
            {{/each}}
          </div>
          <div class="tab-content">
            {{#each results:result }}
              {{#if result == activeTab}}
                {{#results[result]}}
                  <div class="tab-content__results">
                    <h3 class="mui--text-title"><a href={{ url }}>{{{ title }}}</a></h3>
                    <p class="mui--text-body1">{{{ snippets }}}</p>
                  </div>
                {{/}}
              {{/if}}
            {{/each}}
          </div>
        </script>
        {% endraw %}
      </div>
    </div>
  </div>
{% endblock %}

{% block footerscripts %}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ractive/0.7.3/ractive-legacy.js" type="text/javascript"></script>
  <script type="text/javascript">
    $(function() {

      var searchConfig = {
        counts: {{ counts|tojson }},
        results: {{ results|tojson }}
      };

      function init(config) {
        let searchWidget = new Ractive({
          el: '#search-wrapper',
          template: '#search-template',
          data: {
            tabs: config.counts,
            results: '',
            activeTab: '',
            url: window.location.pathname,
            queryString: ''
          },
          getQueryString(paramName) {
            let searchStr = window.location.search.substring(1).split('&');
            let queryString = searchStr.map(function(param){
              let paramSplit = param.split('=');
              if (paramSplit[0] === paramName) {
                return paramSplit[1];
              }
            }).filter(function(val){
              return typeof val !== 'undefined' && val !== "";
            });
            return queryString[0];
          },
          updateTabContent(event, searchType) {
            event.original.preventDefault();
            if(this.get('results.' + searchType)) {
              this.activateTab(searchType);
            } else {
              this.fetchResult(searchType);
            }
          },
          fetchResult(searchType) {
            let widget = this;
            let url = `${widget.get('url')}?q=${widget.get('queryString')}&type=${searchType}`
            $.ajax({
              type: 'GET',
              url: url,
              timeout: 5000,
              dataType: 'json',
              success: function(data) {
                widget.activateTab(searchType, data.results.items, url);
              }
            });
          },
          activateTab(searchType, result='', url='') {
            if(result) {
              this.set('results.' + searchType, result);
            }
            this.set('activeTab', searchType);
            if (url) {
              this.handleBrowserHistory(searchType, url);
            }
          },
          handleBrowserHistory(searchType, url) {
            let widget = this;
            window.history.pushState({'searchType': searchType}, '', url);
            $(window).on('popstate', () => {
              if(window.history.state) {
                widget.set('activeTab', window.history.state.searchType)
              }
            });
          },
          updateMetaTags: function(pageDetails) {
          },
          onrender() {
            let queryString = this.getQueryString('q');
            this.set('queryString', queryString);
            this.activateTab(this.getQueryString('type'), config.results.items);
          }
        });
      }

      init(searchConfig);

    });
  </script>
{% endblock %}
