{% extends "layout.html.jinja2" %}
{% set title_suffix = project.title %}
{%- from "js/event_checkin.js.jinja2" import checkin_count, participant_list %}
{% from "forms.html.jinja2" import renderfield %}
{% from "macros.html.jinja2" import faicon, csrf_tag %}
{% block title %}{% trans %}Setup events{% endtrans %}{% endblock %}

{% block top_title %}
  <h1 class="mui--text-headline"><a href="{{ project.url_for() }}">{{ project.title }}</a></h1>
  <p class="mui--text-subhead"><a href="{{ project.url_for('admin') }}" data-cy="back-to-setup">{{ faicon(icon='arrow-left', icon_size='subhead') }} {% trans %}Back to setup events{% endtrans %}</a></p>
{% endblock %}

{% block contentwrapper %}
  <div class="grid">
    <div class="grid__col-xs-12">
      <div>
        <form method="POST" id="csrf_form" enctype="multipart/form-data" class="mui-form mui--pull-right">
          <div class="form-group">
            {{ csrf_tag() }}
            <input type="hidden" name="form.id" value="csrf_form"/>
          </div>
          <button id="csrf_form-submit" class="mui-btn mui-btn--small mui-btn--accent" type="submit">{% trans %}Sync tickets{% endtrans %}</button>
        </form>
      </div>
    </div>
    <div class="grid__col-xs-6 grid__col-sm-4 grid__col-md-6 grid__col-lg-3">
      <h3 class="mui--text-title">{{ ticket_event.title }}&nbsp;<a href="{{ ticket_event.url_for('edit') }}" arial-label="{% trans %}Edit{% endtrans %}">{{ faicon(icon='edit', icon_size='subhead') }}</a></h3>
    </div>
    <div class="grid__col-xs-6 grid__col-sm-8 grid__col-md-6 grid__col-lg-9">
      {{ checkin_count() }}
    </div>
    <div class="grid__col-xs-12 grid__col-md-3">
      <form class="search-participant mui-form mui-form--margins">
        <div class="mui-textfield mui-textfield--float-label">
          <input class="field-title search-query" id="search" type="text" name="key" value=""/>
          <label>{{ faicon(icon='search',  baseline=false) }} Search</label>
        </div>
      </form>
    </div>
    <div class="grid__col-xs-12 grid__col-md-9">
      <ul class="mui-list--inline">
        <li><a href="{{ ticket_event.url_for('badges') }}" target="_blank" rel="noopener" class="mui-btn mui-btn--small mui-btn--raised mui-btn--primary" data-cy="badges-to-printed">Badges to be printed</a></li>
         <li><a href="{{ ticket_event.url_for('label_badges') }}" target="_blank" rel="noopener" class="mui-btn mui-btn--small mui-btn--raised mui-btn--primary" data-cy="label-badges-to-printed">Label badges to be printed</a></li>
        <li><a href="{{ ticket_event.url_for('badges') }}?badge_printed=t" target="_blank" rel="noopener" class="mui-btn mui-btn--small mui-btn--raised mui-btn--accent" data-cy="badges-printed">Badges printed</a></li>
        <li class="badge-print-status-btn">
          <form method="POST" id="badge_form" class="mui-form">
              {{ badge_form.hidden_tag() }}
              <input type="hidden" name="form.id" value="badge_form"/>
              {{ renderfield(badge_form.badge_printed, css_class="select2-inline", nolabel=true) }}
            <input id="badge-form-submit"  class="mui-btn mui-btn--small mui-btn--raised mui-btn--danger" type="submit" value="Update badges"/>
          </form>
        </li>
      </ul>
    </div>
  </div>
  <div class="grid">
    <div class="grid__col-xs-12 mui-table--responsive-wrapper">
      <table class="mui-table mui-table--bordered mui-table--responsive attendee-table" id='ticket-participants-table'>
        <thead>
          <tr class="active">
            <th>Name</th>
            <th>Tickets</th>
            <th>Email</th>
            <th>Company</th>
            <th>Actions</th>
          </tr>
        </thead>
        {{ participant_list() }}
      </table>
    </div>
  </div>
{% endblock %}

{% block footerscripts %}
<script src="{{ built_asset('event.js') }}" type="text/javascript"></script>
<script type="text/javascript">
  $(document).ready(function() {
    /* Check-in scenarios:
    1. A participant is checked-in & Internet is available. Also verify for cancel check-in and multiple participants check-in.
    2. A participant is checked-in & Internet is down.
    3. Abort a participant's check-in(A wrong particpant was checked in so cancel check-in immediately using abort) when Internet is available.
    4. Abort a participant's check-in when Internet is down.
    5. There are two check-in counters & both counters have internet: They have checked-in different participants. Verify both counters have the recent check-in status of participants.
    6. There are two check-in counters & both counter's internet is down: They have checked-in different participants. Verify both counters have the recent check-in status of participants, once internet is up.
    7. There are two check-in counters & both counters have internet: They checked-in few same participants. Verify both counters have the recent check-in status of participants.
    8. There are two check-in counters & both counter's internet is down: They checked-in few same participants. Verify both counters have the recent check-in status of participants, once internet is up.
    8. There are two check-in counters & one counters has internet and the other counter doesn't: They have checked-in different participants. Verify both counters have the recent check-in status of participants, once internet is up.
    9. There are two check-in counters & one counters has internet and the other counter doesn't: They have checked-in few same participants. Verify both counters have the recent check-in status of participants, once internet is up.*/
    var ticketEventConfig = {};
    ticketEventConfig.checkin = {
      IsPromoter: {%- if project.current_roles.promoter %} true {% else %} false {%- endif %},
      isUsher: {%- if project.current_roles.usher %} true {% else %} false {%- endif %},
      checkinUrl: "{{ ticket_event.url_for('checkin') }}",
      participantlistUrl: "{{ ticket_event.url_for('participants_json') }}",
      ticketEventName: {{ project.name|tojson }} + "-" + {{ ticket_event.title|tojson }}.replace(/ /g,'-'),
    };
    ticketEventConfig.search = {
      tableId: 'ticket-participants-table',
      inputId: 'search'
    };
    Hasgeek.ticketEventInit(ticketEventConfig);
    //If there is no network, display a confirmation dialog when user closes/reloades the page
    window.onbeforeunload = function() {
      if (!navigator.onLine) {
        return 'There is no network!';
      } else {
        return true;
      }
    };
    $('#badge_form').on("submit", function() {
      if ($('#badge_form select.field-badge_printed').val() === '') {
        return false;
      } else {
        return window.confirm(gettext('Are you sure? Selected action will apply to all listed participants'));
      }
    });
  });
</script>
{% endblock %}
