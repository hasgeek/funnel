{% extends "layout.html.jinja2" %}
{% from "baseframe/mui/forms.html.jinja2" import rendersubmit, ajaxform %}
{% from "baseframe/components.html.jinja2" import faicon %}

{% block title %}{% trans %}Updates{% endtrans %}{% endblock %}

{% block top_title %}
  <h1 class="mui--text-display1">
    {{ faicon(icon='bell', icon_size='headline')  }} {{ self.title()|e }}
  </h1>
{% endblock %}

{% block basecontent %}
  <div class="mui-container tab-content">
    <div class="grid">
      {% raw %}
      <div class="grid__col-xs-12" id="notifications" v-cloak>
        <ul class="mui-list--unstyled">
          <li class="update update--small" v-for="(notification, index) in notifications" :class="[!notification.notification.is_read ? 'update--unread' : 'update--read']" data-visible-time='' :ref="'notification-'+index" :data-index='index'>
            <div v-html=notification.html></div>
          </li>
        </ul>
        <p class="js-lazy-loader loading" v-if="next_num"></p>
      </div>
      {% endraw %}
    </div>
  </div>
{% endblock %}

{% block footerscripts %}
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=IntersectionObserver"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.min.js"></script>
  <script type="text/javascript">
    var notificationConfig = {
      markReadUrl: {{ url_for('notification_mark_read', eventid='eventid')|tojson }},
    };
    $(function() {
      Vue.config.devtools = true;
      const notificationApp = new Vue({
        el: '#notifications',
        data() {
          return {
            notifications: [],
            eventids: [],
            next_num: 1,
            waitingForResponse: false,
            markReadUrl: notificationConfig.markReadUrl,
          };
        },
        methods: {
          fetchResult(page) {
            console.log('fetchResult', page)
            if (!notificationApp.waitingForResponse) {
              notificationApp.waitingForResponse = true;
              $.ajax({
                type: 'GET',
                data: {
                  page: page,
                },
                timeout: window.Hasgeek.config.ajaxTimeout,
                dataType: 'json',
                success(data) {
                  notificationApp.addNotifications(data.notifications, page);
                  if(data.next_num)
                    notificationApp.next_num = data.next_num;
                  else
                    notificationApp.next_num = 0;
                  notificationApp.waitingForResponse = false;
                },
              });
            }
          },
          addNotifications(notifications, page) {
            for (notice of notifications) {
              if(!notificationApp.eventids.includes(notice.notification.eventid)) {
                console.log('notice not present', notice.notification.eventid);
                notificationApp.notifications.push(notice);
                if(page > 1)
                  notificationApp.notifications.push(notice);
                else
                  notificationApp.notifications.unshift(notice);
                notificationApp.eventids.push(notice.notification.eventid);
              } else {
                console.log('notice is present', notice.notification.eventid);
              }
            }
          },
          lazyoad() {
            const lazyLoader = document.querySelector('.js-lazy-loader');
            if (lazyLoader) {
              this.handleObserver = this.handleObserver.bind(this);

              const observer = new IntersectionObserver(this.handleObserver, {
                rootMargin: '0px',
                threshold: 0,
              });
              observer.observe(lazyLoader);
            }
          },
          handleObserver(entries) {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                this.fetchResult(notificationApp.next_num);
              }
            });
          },
          updateReadStatus(notification) {
            if($(notification).attr('data-visible-time')) {
              let notificationItem = this.notifications[$(notification).attr('data-index')];
              let url = this.markReadUrl.replace('eventid', notificationItem.notification.eventid);
              $.ajax({
                type: 'POST',
                url: url,
                data: { csrf_token: $('meta[name="csrf-token"]').attr('content')},
                dataType: 'json',
                timeout: window.Hasgeek.config.ajaxTimeout,
                success: function (responseData) {
                  notificationItem.notification.is_read = true;
                  notificationItem.observer.unobserve(notification);
                },
              });
            }
          },
          notificationInViewport(entries) {
            let app = this;
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                $(entry.target).attr('data-visible-time', entry.time);
                window.setTimeout(function() {
                  app.updateReadStatus(entry.target)
                }, window.Hasgeek.config.readReceipt)
              } else {
                $(entry.target).attr('data-visible-time', '');
              }
            });
          },
        },
        mounted() {
          this.lazyoad();
          window.setInterval(() => {
            this.fetchResult(1) }, window.Hasgeek.config.refreshInterval
          );
        },
        updated() {
          let app = this;
          $.each($('.update--unread'), function(index, elem) {
            app.notificationInViewport = app.notificationInViewport.bind(app);
            const notificationObserver = new IntersectionObserver(app.notificationInViewport, {
              rootMargin: '0px',
              threshold: 0,
            });
            notificationObserver.observe(elem);
            let notificationItem = app.notifications[$(elem).attr('data-index')];
            notificationItem.observer = notificationObserver;
          });
        }
      });
    });
  </script>
{% endblock %}
